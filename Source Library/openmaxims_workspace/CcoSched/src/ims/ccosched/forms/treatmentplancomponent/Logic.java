//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.54 build 2714.21485)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.treatmentplancomponent;

import ims.ccosched.forms.treatmentplancomponent.GenForm.TreatmentPlanRow;
import ims.ccosched.vo.PatTreatPlanActionVo;
import ims.ccosched.vo.PatTreatPlanActionVoCollection;
import ims.ccosched.vo.PatTreatmentPlanLiteVo;
import ims.dto.client.Lkup;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.oncology.vo.lookups.TreatmentGroupSite;

import java.text.ParseException;
import java.util.Iterator;

public class Logic extends BaseLogicDTO
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		loadLookups();
	}

	//Public Methods
	public void displayRecords(String treatmentPlanId)
	{
		displayRecordsTp(treatmentPlanId,Boolean.FALSE); //wdev-13770
	}

	//wdev-13770
	private void displayRecordsTp(String treatmentPlanId,Boolean showActive)
	{
	//		if(treatmentPlanId == null || treatmentPlanId.length() == 0)
	//		throw new CodingRuntimeException("No Treament Plan id supplied to the Custom Control");
	
		if (form.getGlobalContext().getPatTreatmentPlanIsNotNull())
		{			
		
	//		Go_ptreatpl tp = (Go_ptreatpl)domain.getDTOInstance(Go_ptreatpl.class);
	//		tp.Filter.clear();
	//		tp.Filter.Unid = treatmentPlanId;
	//		Result result = tp.get();
	//		if (result != null)
	//		{
	//			//engine.MessageBox(result.getMessage());
	//			return;
	//		}
	
			form.getLocalContext().setTreatmentPlan(form.getGlobalContext().getPatTreatmentPlan());
			
	//		if(canUpdateContext())
	//		{
	//			form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanDetails(tp.DataCollection.get(0));
	//		}
	
			populateHeaderTP(form.getLocalContext().getTreatmentPlan());
	//
	//		Go_ptplact actions = (Go_ptplact)domain.getDTOInstance(Go_ptplact.class);
	//		actions.Filter.clear();
	//		actions.Filter.Pt_tp_id = treatmentPlanId;
	//		//10/07/2003 - List only the active actions
	//		actions.Filter.Actdstat = "Y";
	//		result = actions.list();
	//		if (result != null)
	//		{
	//			engine.showMessage(result.getMessage());
	//			return;
	//		}
	
			form.getLocalContext().setAction(form.getLocalContext().getTreatmentPlan().getActions());
			
	//		if(canUpdateContext())
	//		{
	//			form.getGlobalContext().CcoSched.ActionUpdate.setTreatmentPlanActions(actions);
	//		}
	
	//		if (actions.DataCollection.count()== 0)
	//		{
	//			engine.showMessage("Failed to get treatment plan actions.");
	//			return;
	//		}
	
			//Display TP and Actions
			if (form.getLocalContext().getTreatmentPlanIsNotNull())
				
			for (Iterator iter = form.getLocalContext().getAction().iterator(); iter.hasNext();) 
			{
				PatTreatPlanActionVo element = (PatTreatPlanActionVo) iter.next();
				if(Boolean.TRUE.equals(showActive)) //wdev-13770
				{
					if (element.getActionIsNotNull() && Boolean.TRUE.equals(element.getActive()))
						addTreatmentPlanRow(element, form.TreatmentPlan().getRows().newRow());
				}
				else
				{
					if (element.getActionIsNotNull())
						addTreatmentPlanRow(element, form.TreatmentPlan().getRows().newRow());
				}
				
			}
			
	//		for (int i = 0; i < actions.DataCollection.count(); ++i)
	//		{
	//			Go_ptplactRecord go_ptplactRecord = actions.DataCollection.get(i);
	//			if(go_ptplactRecord.Treatmentaction == null || go_ptplactRecord.Treatmentaction.length() == 0)
	//			{
	//				addTreatmentPlanRow(go_ptplactRecord, form.TreatmentPlan().getRows().newRow());
	//			}
	//		}
			
			//Display children
	//		for (int i = 0; i < actions.DataCollection.count(); ++i)
	//		{
	//			Go_ptplactRecord go_ptplactRecord = actions.DataCollection.get(i);
	//			if(go_ptplactRecord.Treatmentaction != null && go_ptplactRecord.Treatmentaction.length() > 0)
	//			{
	//				TreatmentPlanRow parentRow = getParentRow(go_ptplactRecord.Treatmentaction);
	//				if(parentRow != null)
	//				{
	//					parentRow.setExpanded(true);
	//					addTreatmentPlanRow(go_ptplactRecord, parentRow.getRows().newRow());
	//				}
	//			}
	//		}
		}
	}
	//-------------
	private TreatmentPlanRow getParentRow(String treatmentActionID)
	{
		for (int i = 0; i < form.TreatmentPlan().getRows().size(); i++)
		{
			TreatmentPlanRow actionsGridRow = form.TreatmentPlan().getRows().get(i);
			if(actionsGridRow.getValue() != null && actionsGridRow.getValue().equals(treatmentActionID))
			{
				return actionsGridRow;
			}
		}

		return null;
	}
	
	private void addTreatmentPlanRow(PatTreatPlanActionVo element, TreatmentPlanRow row)
	{
		// row.Activity = actions.Go_ptplactCollection[i].attActivity_idtxt + ",
		// " + actions.Go_ptplactCollection[i].attAction_idtxt;
		
		if(element == null || row == null)
		return;
	
	StringBuilder activity = new StringBuilder();
	activity.append((element.getActivityIsNotNull()?element.getActivity().getName():"No Activity)"));
	activity.append(", ");
	activity.append(element.getActionIsNotNull()?(element.getAction().getActionIsNotNull()?element.getAction().getAction().getName():""):"");
	// 10/01/2003 - AU - Kevin's improvements
	String tooltip = "<center><b>" + activity + "</b></center>" + "Consultant: " + (element.getTreatingConsultantIsNotNull()?element.getTreatingConsultant().getName():"") + newline + "Priority: " + (element.getPriorityIsNotNull()?element.getPriority().getText():"") + newline + "Attending As: " + (element.getAttendingAsIsNotNull()?element.getAttendingAs().getText():"") + newline;

	if (element.getAttendingAsIsNotNull())
	{
		//TODO
//		if (element.getAttendingAs().equals(ims.ccosched.vo.lookups.AttendingAs.INPAT))
//		{
//			tooltip += " Booked Date: " + GetDate(element.get) + newline;
//			tooltip += " Ward: " + element.Opa_rsnodesc + newline;
//		}// Outpatient case
//		else if (element.getAttendingAs().equals(ims.ccosched.vo.lookups.AttendingAs.OUTPAT))
//		{
//			tooltip += " Appointment Date: " + GetDate(element.Appt_date) + newline;
//		}
	}
	
	tooltip += "Transport Required: " + (element.getTransportIsNotNull()?element.getTransport().getText():"") + newline + "Treatment Category: " + (element.getCategoryIsNotNull()?element.getCategory().getText():"") + newline;
	tooltip += "Estimated Start Date: " + (element.getEstartDateIsNotNull()?element.getEstartDate().toString():"") + newline;
	tooltip += "Estimated End Date: " + (element.getEendDateIsNotNull()?element.getEendDate().toString():"") + newline;

	if (element.getActivityIsNotNull())
	{
		// External Beam or Orthvoltage
		Integer nActivityId = null;
		try
		{
			nActivityId = Integer.valueOf(element.getActivity().getActivityId());
		}
		catch (NumberFormatException e)
		{
			e.printStackTrace();
		}

		if (nActivityId != null)
		{
			if (nActivityId.intValue() == -202 || nActivityId.intValue() == -207)
			{
				tooltip += "  Modality: " + (element.getModalityIsNotNull()?element.getModality().getText():"") + newline +
						"  Energy Value: " + (element.getModalEnergyIsNotNull()?element.getModalEnergy():"") + newline + "  Units: " +
						(element.getUnitIsNotNull()?element.getUnit().getText():"") + newline +
						"  Dose: " + (element.getTl_doseIsNotNull()?element.getTl_dose().toString():"") +
						" in " + (element.getTl_fractionsIsNotNull()?element.getTl_fractions().toString():"") +
						" Fractions over " + (element.getTl_durationIsNotNull()?element.getTl_duration().toString():"") +
						" days" + newline + GetActionTreatmentSite(element);

			} // Chemotherapy
			else if (nActivityId.intValue() == -201)
			{
				tooltip += " Start Date: " + (element.getChemPlanStartDateIsNotNull()?element.getChemPlanStartDate().toString():"") + " Planned Regime: " + (element.getPlannedRegimeIsNotNull()?element.getPlannedRegime().getText():"") + newline;
			} // Brachytherapy
			else if (nActivityId.intValue() == -204 || nActivityId.intValue() == -200)
			{
				if (nActivityId.intValue() == -204)
				{
					tooltip += " Date: " + (element.getImagingDateIsNotNull()?element.getImagingDate().toString():"") + newline;
					tooltip += " Modality: " + (element.getModalityIsNotNull()?element.getModality().getText():"") + newline;
					tooltip += " Anaesthetic Needed: " + (element.getAneastheticIsNotNull()?element.getAneasthetic().getText():"");
				}
			}
		}
	}

	row.setActivity(activity.toString());
	row.setTooltip(tooltip);
	row.setValue(element.getID_PatAction().toString());

	}

	private void populateHeaderTP(PatTreatmentPlanLiteVo vo)
	{
		
		String headerActivity = vo.getDecisionToTreat() + ", " + vo.getConsultant().getName();
	
		String tmpStr = vo.getDateSeen().toString();

		// Treatment sites
		String treatmentSiteStr = new String("");
		if (vo.getTreatmentSitesIsNotNull())
		{
			for (int i = 0 ; i < vo.getTreatmentSites().size(); i++) 
			{
				TreatmentGroupSite site = vo.getTreatmentSites().get(i);
				if (site.getParentInstance() != null)
				{
					treatmentSiteStr += site.getText();
					if(!treatmentSiteStr.equals("") && vo.getTreatmentSites().size() > i+1)
						treatmentSiteStr+= ", ";					
				}
			}
			
							
		}

		String headerTooltip = "<center><b>"+ "Treatment Plan" + "</b></center>"+
		"Date Seen: "	+ tmpStr + newline+

		"ECAD Date: "	+ (vo.getEcad_dateIsNotNull()?vo.getEcad_date().toString():"") + newline+
		
		"Treatment Intent: " + (vo.getTreatmentIntentIsNotNull()?vo.getTreatmentIntent().getText():"") + newline+
		"Treatment Site: " + treatmentSiteStr + newline;
		
		if (vo.getTreatmentSitesIsNotNull())
		{
			if (vo.getTreatmentSites().size()>0)
				headerTooltip += "Tumour Group: " + (vo.getTreatmentSites().get(0).getParentInstance() != null ? vo.getTreatmentSites().get(0).getParentInstance().getText() : vo.getTreatmentSites().get(0).getText()) + newline +
							 "Tumour Site: "	+ (vo.getTreatmentSites().get(0).getParentInstance() != null ? vo.getTreatmentSites().get(0).getText() : "")  + newline;
		}
		
		headerTooltip += "Histology: "	+ (vo.getPrimaryTumourHistologyIsNotNull()?vo.getPrimaryTumourHistology().getHistologyDescription():"") + newline+
					     "Comment: " + (vo.getTreatmentplanCommentIsNotNull()?vo.getTreatmentplanComment():"");

		GenForm.TreatmentPlanRow row = form.TreatmentPlan().getRows().newRow();
		row.setActivity(headerActivity);
		row.setTooltip(headerTooltip);

		// The colour is the same as the grid header - please modify it in the case the header colour changes
		row.setBackColor(Color.AliceBlue);
	}

	private void loadLookups()
	{

	}

	private String GetAnaestheticText(String lkup_id)
	{
		// Anaesthetic
		Lkup lkup = form.getGlobalContext().CcoSched.TreatmentPlan.getAnaesthetic();
		if (lkup != null)
		{
			for (int i = 0; i < lkup.DataCollection.count(); i++)
			{
				if (lkup.DataCollection.get(i).Lkup_id.equals(lkup_id))
				{
					return lkup.DataCollection.get(i).Lkup_nm;
				}
			}
		}

		return "";
	}

	private String GetActionTreatmentSite(PatTreatPlanActionVo element)
	{
		return "";
	}

	// Technique
	private String GetTechniqueText(String lkup_id)
	{
		Lkup lkup = form.getGlobalContext().CcoSched.TreatmentPlan.getTechnique();
		if (lkup != null)
			for (int i = 0; i < lkup.DataCollection.count(); i++)
				if (lkup.DataCollection.get(i).Lkup_id.equals(lkup_id))
					return lkup.DataCollection.get(i).Lkup_nm;

		return "";
	}
	
	private String GetDate(String dtoDate)
	{
		Date date = null;
		if(date != null && date.equals("") == false)
			try{date = new Date(dtoDate, DateFormat.ISO);}catch (ParseException e){	}
		return (date == null ? "" : date.toString(DateFormat.STANDARD));
	}
	public void setUpdateContext(Boolean value)
	{
		form.getLocalContext().setUpdateContext(value);
	}
	
	private boolean canUpdateContext()
	{
		return form.getLocalContext().getUpdateContextIsNotNull() && form.getLocalContext().getUpdateContext().booleanValue();
	}
	
	public void clear()
	{
		form.TreatmentPlan().getRows().clear();
	}
	
	private String newline = new String("<br>");

	public PatTreatPlanActionVoCollection getActions()
	{
		return form.getLocalContext().getAction();
	}

	public PatTreatmentPlanLiteVo getTreatmentPlan()
	{
		return form.getLocalContext().getTreatmentPlan();
	}
	
	//wdev-13770
	public void displayRecordsWithActiveACtions(String treatmentPlanId,	Boolean activeActions) 
	{
		displayRecordsTp(treatmentPlanId,activeActions); //wdev-13770
		
	}
}
